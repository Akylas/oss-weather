project.ext.abiCodes = ['armeabi':1, 'armeabi-v7a':2, 'arm64-v8a':3, 'x86':4, 'x86_64':5]

android { 
  // we only enable split if specified as an arg or if in debug and abiFilters is used(through cli)
  def splitEnabled = (gradle.startParameter.taskNames.contains("assembleDebug") && project.hasProperty('abiFilters')) || project.hasProperty('splitEnabled');
  defaultConfig {  
    minSdkVersion 19
    versionCode 43
    versionName "1.2.1"
    ndk {
      if (splitEnabled || project.hasProperty('abiFilters')) {
        abiFilters.clear()
        if (!splitEnabled && project.hasProperty('abiFilters')) {
          abiFilters.addAll(project.findProperty('abiFilters').split(',').collect{it as String})
        }
      }

    }
  }
  lintOptions {
      checkReleaseBuilds false
      // Or, if you prefer, you can continue to check for errors in release builds,
      // but continue the build even when errors are found:
      abortOnError false
  }
  splits {
      abi {
          enable splitEnabled
          if (project.hasProperty('abiFilters')) {
            def abis = project.findProperty('abiFilters')
            reset()
            include abis.split(',')
          }
          universalApk project.hasProperty('universalApk')
      }
  }
  aaptOptions {
    additionalParameters "--no-version-vectors"  
  }  
  buildTypes { // THIS CAUSES RELEASE MODE ERROR ON APP LAUNCH
    release {
      multiDexEnabled false
      // Enables code shrinking, obfuscation, and optimization for only
      // your project's release build type.
      minifyEnabled true

      // Enables resource shrinking, which is performed by the
      // Android Gradle plugin.
      shrinkResources true

      // resConfigs "en", "fr", "es"

      // Includes the default ProGuard rules files that are packaged with
      // the Android Gradle plugin. To learn more, go to the section about
      // R8 configuration files.
      def absolutePathToAppResources = getAppResourcesPath()
      proguardFiles getDefaultProguardFile(
        'proguard-android-optimize.txt'),
        "$absolutePathToAppResources/Android/proguard-rules.pro"

      debuggable false
      jniDebuggable false
      renderscriptDebuggable false
    }
    debug {
      multiDexEnabled true
    }
  }
}

task createProguard {
    dependsOn 'buildMetadata'
    doLast {
        exec {
            workingDir "$USER_PROJECT_ROOT"
            commandLine 'node', 'scripts/createProguard.js'
        }
    }
}
tasks.whenTaskAdded({ DefaultTask currentTask ->
    if (currentTask =~ /buildMetadata/) {
        currentTask.finalizedBy("createProguard")
    }
})

android.applicationVariants.all { variant ->
    variant.outputs.each { output ->
        def baseAbiVersionCode = project.ext.abiCodes.get(output.getFilter("ABI"), 0)
        if (baseAbiVersionCode != null) {
            output.versionCodeOverride = baseAbiVersionCode * 10000000 + variant.versionCode
        }
    }
}