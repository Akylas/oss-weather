
project.ext.abiCodes = ['armeabi':1, 'armeabi-v7a':2, 'arm64-v8a':3, 'x86':4, 'x86_64':5]
def BUILD_TOOLS_PATH = "$rootDir/build-tools"

android { 
  // we only enable split if specified as an arg or if in debug and abiFilters is used(through cli)
  def splitEnabled = (gradle.startParameter.taskNames.contains("assembleDebug") && project.hasProperty('abiFilters')) || project.hasProperty('splitEnabled');
  defaultConfig {  
    multiDexEnabled false
    minSdkVersion 21
    versionCode 52
    versionName "1.3.4"

    if (project.hasProperty('resConfigs')) {
      def resConfigs = project.findProperty('resConfigs')
      reset()
      include resConfigs.split(',')
    } else {
      resConfigs "en", "fr", "es"
    }
    ndk {
      if (splitEnabled || project.hasProperty('abiFilters')) {
        abiFilters.clear()
        if (!splitEnabled && project.hasProperty('abiFilters')) {
          abiFilters.addAll(project.findProperty('abiFilters').split(',').collect{it as String})
        }
      }

    }
  }
  lintOptions {
      checkReleaseBuilds false
      // Or, if you prefer, you can continue to check for errors in release builds,
      // but continue the build even when errors are found:
      abortOnError false
  }
  splits {
      abi {
          enable splitEnabled
          if (project.hasProperty('abiFilters')) {
            def abis = project.findProperty('abiFilters')
            reset()
            include abis.split(',')
          }
          universalApk project.hasProperty('universalApk')
      }
  }
  // aaptOptions {
  //   additionalParameters "--no-version-vectors"  
  // }  
  buildTypes { // THIS CAUSES RELEASE MODE ERROR ON APP LAUNCH
    release {
      signingConfig (project.hasProperty('unsignedApk') ? null : signingConfigs.release)
      multiDexEnabled false
      // Enables code shrinking, obfuscation, and optimization for only
      // your project's release build type.
      minifyEnabled true

      // Enables resource shrinking, which is performed by the
      // Android Gradle plugin.
      shrinkResources true

      // Disables PNG crunching for the release build type.
      crunchPngs false


      // Includes the default ProGuard rules files that are packaged with
      // the Android Gradle plugin. To learn more, go to the section about
      // R8 configuration files.
      def absolutePathToAppResources = getAppResourcesPath()
      proguardFiles getDefaultProguardFile(
        'proguard-android-optimize.txt'),
        "$BUILD_TOOLS_PATH/proguard-rules.pro"

      debuggable false
      jniDebuggable false
      renderscriptDebuggable false
    }
    debug {
      multiDexEnabled true;
    }
  }
}

task createProguard {
    dependsOn 'buildMetadata'
    doLast {
        exec {
            workingDir "$USER_PROJECT_ROOT"
            commandLine 'node', 'scripts/createProguard.js'
        }
    }
}
tasks.whenTaskAdded({ DefaultTask currentTask ->
    if (currentTask =~ /buildMetadata/) {
        currentTask.finalizedBy(createProguard)
    }
    if (currentTask =~ /minify.*WithR8/) {
        currentTask.dependsOn(createProguard)
    }
})

android.applicationVariants.all { variant ->
    if (project.hasProperty('splitEnabled')) {
        if (variant.buildType.name == "debug") {
            variant.outputs.each { output ->
                output.versionNameOverride = android.defaultConfig.versionName + "." + variant.versionCode + "-dev";
            }
        } else {
            variant.outputs.each { output ->
                output.versionNameOverride = android.defaultConfig.versionName + "." + variant.versionCode;
            }
        }
    }
}

configurations {
    all {
        exclude group: 'androidx.lifecycle', module: 'lifecycle-viewmodel-ktx'
    }
}

// sentry {
//     // Disables or enables the automatic configuration of ProGuard
//     // for Sentry.  This injects a default config for ProGuard so
//     // you don't need to do it manually.

//     // Only enable it if you are using sentry-android <= v1.7,
//     // sentry-android >= v2.0 already does it automatically.
//     autoProguardConfig false

//     // Enables or disables the automatic upload of mapping files
//     // during a build.  If you disable this, you'll need to manually
//     // upload the mapping files with sentry-cli when you do a release.
//     autoUpload false

//     // Disables or enables the automatic configuration of Native Symbols
//     // for Sentry. This executes sentry-cli automatically so
//     // you don't need to do it manually.
//     // Default is disabled.
//     uploadNativeSymbols false

//     // Does or doesn't include the source code of native code for Sentry.
//     // This executes sentry-cli with the --include-sources param. automatically so
//     // you don't need to do it manually.
//     // Default is disabled.
//     includeNativeSources false
// }