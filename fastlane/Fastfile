class String
  def titlecase
    split(/([[:alpha:]]+)/).map(&:capitalize).join
  end
end

def truncate(string, length = 20)
  string.size > length+5 ? [string[0,length],string[-5,5]].join("...") : string
end

fastlane_version '2.135.2'
$app_id = 'com.akylas.weather'
$lang = 'en-US'
$ios_scheme = 'nsforecastie'
$repository_name = 'farfromrefug/ns-forecastie'

desc 'test lane'
lane :test do
    Dir.chdir("..") do
        print "TEST SUCCESSFUL!"
    end
end
desc 'Check Git Status'
lane :checkGitStatus do
    Dir.chdir("..") do
        repo_status = Actions.sh("git status --porcelain -uno")
        repo_clean = repo_status.empty?
        if repo_clean
          UI.success('Git status is clean, all good! ðŸ’ª')
        else
          error_message = "Git repository is dirty! Please ensure the repo is in a clean state by committing/stashing/discarding all changes first."
          UI.user_error!(error_message)
        end
    end
end

desc 'Ensure deps are installed'
lane :tns_install do |params| 
  sh("tns", "install")

end
desc 'Prepare the application.'
lane :prepare do |params| 
  platform = params[:platform]
  sh("rm", "-fr", "platforms/" + platform)
  sh("tns", "prepare", platform, "--release", "--env.adhoc")

end

lane :build_flavor do |params| 
  platform = params[:platform]
  flavor = params[:flavor]

  build

  version = ""
  versionCode = ""
  
  Dir.chdir("..") do
    version  =  sh("./node_modules/.bin/get-version", platform, "version").gsub(/\n/,'')
    versionCode  =  sh("./node_modules/.bin/get-version", platform, "code").gsub(/\n/,'')
  end
  
  # there we add the platform to the dist paramater. The idea is to have different dist for ios android
  # this is because we generate different sources for android and ios so we have different sourceMaps
  # and so to map errors correctly we use different dist for ios and android
  sentryDist =  versionCode + '.' + platform # optional distribution of the release usually the buildnumber
  puts "platform:"  + platform
  puts "flavor:"  + flavor
  puts "version:"  + version
  puts "versionCode:"  + versionCode

  sentry_create_release(
    version: version, # release version to create
    app_identifier: $app_id, # pass in the bundle_identifer of your app
  )
  sentry_set_commits(
    version: version,
    app_identifier: $app_id, # pass in the bundle_identifer of your app
    auto: true, # enable completely automated commit management
    # clear: false, # clear all current commits from the release
    # commit: '...', # commit spec, see `sentry-cli releases help set-commits` for more information
  )

  sentry_upload

  changelog = get_changelog(platform:platform, flavor:flavor)

  upload_store(changelog:changelog, version: version, versionCode: versionCode, flavor:flavor)
  add_git_tag(tag: "#{platform}/#{flavor}/#{version}/#{versionCode}")

  push_git_tags(force:true)
end


lane :get_changelog  do |params| 
  platform = params[:platform]
  flavor = params[:flavor]
  puts "get_changelog "+  platform
  ignorePlatform = 'ios'
  if(platform == "ios") 
    ignorePlatform = "android"
  end
  isReleasable = analyze_commits(match: "#{platform}/#{flavor}*", ignore_scopes: [ignorePlatform])
  logs = conventional_changelog(format: 'slack', title: "#{platform.capitalize} Beta", display_title:false, display_links:false, order:["feat", "fix", "refactor", "perf"])
  puts logs
  logs
end

platform :ios do

  desc 'Upload Dsyms to Sentry'
  lane :sentry_upload do 
    sentry_upload_dsym
  end
  lane :upload_store  do |params| 
    upload_to_testflight(
        changelog:params[:changelog],
        distribute_external: true,
        groups: [params[:flavor]],
        notify_external_testers: true
      )
  end

  desc 'Fetch certificates and provisioning profiles'
  lane :certificates do
      match(type: 'development')
      match(type: "appstore")
  end

  desc 'Build the iOS application.'
  lane :build do
      match(type: "appstore")
      prepare(platform:'ios')
      build_ios_app(
        output_directory:"dist",
        scheme: $ios_scheme,
        workspace: "./platforms/ios/#{$ios_scheme}.xcworkspace"
      )
  end


  desc 'Ship iOS build to Testflight.'
  lane :beta do
    checkGitStatus
    tns_install(platform:'ios')
    build_flavor(platform:'ios', flavor:'beta')
  end
  desc 'Ship iOS build to Testflight.'
  lane :alpha do
    # checkGitStatus
    # tns_install(platform:'ios')
    build_flavor(platform:'ios', flavor:'alpha')
  end
end

platform :android do

  desc 'Upload  to Sentry'
  lane :sentry_upload do 
  end

lane :write_changelog do |params| 
  version = params[:version]
  changelog = params[:changelog]

  if (changelog && changelog.length > 500) 
    changelog = changelog[0..499]
  end

  metadata_dir="metadata/android/#{$lang}/changelogs"
  require 'fileutils'
  system 'mkdir', '-p', metadata_dir
  File.write("#{metadata_dir}/#{version}.txt", changelog)
  # Create a new branch and upload a PR for it.
  sh("git add #{metadata_dir}; git commit -m '#{version} release notes' --allow-empty")
end
  lane :upload_store   do |params| 
    track = params[:flavor]
    # if (track == 'beta') 
    #   track = 'internal'
    # end
    write_changelog(version:params[:versionCode], changelog:params[:changelog]);
    upload_to_play_store(
      track: track,
      package_name:$app_id,
      track_promote_to: track,
      json_key_data: ENV["PLAYSTORE_JSON_KEY_DATA"],
      aab: './platforms/android/app/build/outputs/bundle/release/app-release.aab'
    )
  end

  desc 'Build the Android application.'
    lane :build do
      prepare(platform:'android')
      sh("tns", "build", "android", "--release", "--env.adhoc", "--aab",
          "--key-store-path", "../" + ENV["KEYSTORE_PATH"],
          "--key-store-password", ENV["KEYSTORE_PASSWORD"],
          "--key-store-alias", ENV["KEYSTORE_ALIAS"],
          "--key-store-alias-password", ENV["KEYSTORE_ALIAS_PASSWORD"]
        )
  end
  desc 'Build the Android application For Github.'
  lane :build_github do
    prepare(platform:'android')
    sh("devns", "build", "android", "--release", "--env.adhoc",
        "--key-store-path", "../" + ENV["KEYSTORE_PATH"],
        "--key-store-password", ENV["KEYSTORE_PASSWORD"],
        "--key-store-alias", ENV["KEYSTORE_ALIAS"],
        "--key-store-alias-password", ENV["KEYSTORE_ALIAS_PASSWORD"]
      )
end

desc 'Ship to Github.'
lane :github do
  checkGitStatus
  platform = "android"
  tns_install(platform:platform)
  version = ""
  versionCode = ""
  flavor = "github"

  
  Dir.chdir("..") do
    version  =  sh("./node_modules/.bin/get-version", platform, "version").gsub(/\n/,'')
    versionCode  =  sh("./node_modules/.bin/get-version", platform, "code").gsub(/\n/,'')
  end
  
  puts "platform:"  + platform
  puts "flavor:"  + flavor
  puts "version:"  + version
  puts "versionCode:"  + versionCode

  # sentry_create_release(
  #   version: version, # release version to create
  # )
  build_github
  # sentry_upload
  changelog = get_changelog(platform:platform, flavor:flavor)
  tag  = "#{platform}/#{flavor}/#{version}/#{versionCode}";
  add_git_tag(tag: tag)

  push_git_tags(force:true)
  set_github_release(
    repository_name: $repository_name,
    api_token: ENV["GH_TOKEN"],
    name: version,
    tag_name: tag,
    description: changelog,
    commitish: "master",
    upload_assets: ["platforms/android/app/build/outputs/apk/release/app-release.apk"]
  )
end

  desc 'Ship to Android Playstore Beta.'
  lane :beta do
    checkGitStatus
    tns_install(platform:'android')
    build_flavor(platform:'android', flavor:'beta')
  end
  desc 'Ship to Android Playstore Alpha.'
  lane :alpha do
    # checkGitStatus
    tns_install(platform:'android')
    build_flavor(platform:'android', flavor:'alpha')
  end
end


